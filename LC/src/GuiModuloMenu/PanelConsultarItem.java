/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GuiModuloMenu;

import ClasesTablas.Item;
import ControladorClasesTablas.ItemJpaController;
import Fachada.Fachada;
import java.util.LinkedList;
import java.util.List;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.AbstractTableModel;

/**
 *
 * @author Moni
 */
public class PanelConsultarItem extends javax.swing.JPanel {

    EntityManagerFactory emf = Persistence.createEntityManagerFactory("LCPU");
     
    public PanelConsultarItem() {
        initComponents();
        this.jtConsultarItem.setModel(new defaultModelItem());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jtConsultarItem = new javax.swing.JTable();
        jlConsultarItem = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));
        setAutoscrolls(true);
        setOpaque(false);
        setPreferredSize(new java.awt.Dimension(752, 662));

        jtConsultarItem.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Nombre", "Precio", "Categoria", "No.Identificacion"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jtConsultarItem);

        jlConsultarItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/botonConsultar.jpg"))); // NOI18N
        jlConsultarItem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jlConsultarItemMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(54, 54, 54)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 636, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(298, 298, 298)
                        .addComponent(jlConsultarItem)))
                .addContainerGap(62, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(63, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 517, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jlConsultarItem)
                .addGap(26, 26, 26))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jlConsultarItemMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jlConsultarItemMouseClicked
        
        if(this.jtConsultarItem.getSelectedRow() != -1){
        
        this.removeAll();
        this.revalidate();
        this.repaint();
        PanelResultadosConsultaItem rc = new PanelResultadosConsultaItem();
        
        int idItem = Integer.parseInt(String.valueOf(jtConsultarItem.getValueAt(jtConsultarItem.getSelectedRow(), 0)));       
        
        Fachada fachada = new Fachada();
        Item item = fachada.ConsultarItem(idItem);
        
        if(!(item.getFoto() == null))
        {    
        rc.jlFoto.setIcon(new javax.swing.ImageIcon(getClass().getResource(item.getFoto())));
        }
 
        rc.jtfID.setText(item.getIdItem().toString());
        rc.jtfNombre.setText(item.getNombre());
        rc.jtfPrecio.setText(Integer.toString(item.getPrecio()));
        rc.jcbCategoria.setSelectedItem(item.getCategoria());
        rc.jtaDescripcion.setText(item.getDescripcion());
        
        rc.setSize(752, 686);
        this.add(rc);
        
        }else{
            JOptionPane.showMessageDialog(null, "Seleccione un item primero por favor");
        }
        
    }//GEN-LAST:event_jlConsultarItemMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel jlConsultarItem;
    public javax.swing.JTable jtConsultarItem;
    // End of variables declaration//GEN-END:variables

    public LinkedList<Item> listaItems(){
        LinkedList<Item> listaItems = new LinkedList<>();
        ItemJpaController ijc = new ItemJpaController(emf);
        List<Item> lista = ijc.findItemEntities();
        
        for (Item item : lista) {
            if(item.getEstado().equals("Activo")){
                listaItems.add(item);
            }
        }
        return listaItems;
    }
    
    public class defaultModelItem extends AbstractTableModel{
        
        
        List<Item> listaitem = listaItems();
        
        
        @Override
        public int getRowCount() {
            return listaitem.size();
        }

        @Override
        public int getColumnCount() {
            return 5;
        }

        @Override
        public String getColumnName(int column) {
            switch(column){
                case 0: 
                    return "Id"; 
                case 1: 
                    return "Nombre";
                case 2: 
                    return "Precio";
                case 3: 
                    return "Categoria";
                case 4: 
                    return "Descripcion"; 
            }
            return "";
        }
        
        @Override
        public Object getValueAt(int rowIndex, int columnIndex) {
            
            Item item = listaitem.get(rowIndex);
            
            switch(columnIndex){
                case 0: return item.getIdItem();
                case 1: return item.getNombre();
                case 2: return item.getPrecio();
                case 3: return item.getCategoria();
                case 4: return item.getDescripcion();
            }
            return "";
        }
    }

}
